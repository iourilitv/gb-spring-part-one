package ru.geekbrains;

import org.hibernate.cfg.Configuration;
import ru.geekbrains.persist.Contact;
import ru.geekbrains.persist.Person;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import java.lang.reflect.Field;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class PersonExample {

    public static void main(String[] args) {
        //!!! в учебных целях - реально так не делают
        //потокобезопасный объект - точка входа для источника данных
        EntityManagerFactory factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .buildSessionFactory();
        //!!! в учебных целях - реально так не делают, но здесь можно управлять процессом em
        //объект для отдельной операции(сессии) с БД(em не доступны между потоками)
        EntityManager em = factory.createEntityManager();


        //*** Извлечение данных сущности из таблицы по ее id***
        //Person.class - класс сущности,
        // 2L - идентификатор сущности(первичный ключ), здесь объект Long
        Person person1 = em.find(Person.class, 11L);
        //Позволяет изменить сущьность в рамках той же сессии,
        // т.к. она возвращается в состояние managed
//        System.out.println("PersonExample - person1: " + person1.getFirstName());
        System.out.println("PersonExample - person1: " + person1.getContacts());

//        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//        System.out.println("PersonExample - persons: ");

        //***обращаемся к сущности, а не к таблице, т.к. язык JPQL***
        //получаем список всех сущностей Person(аналог select в sql)
        //связанные таблицы запрашиваются отдельно для каждой сущьности, т.к.
        //@OneToMany - FetchType fetch() по умолчанию LAZY - связанные сущности автоматически не извлекаются.
//        List<Person> persons = em.createQuery("from Person").getResultList();

        //в одном запросе запрашиваем данные из двух связанных таблиц
//        List<Person> persons = em.createQuery("from Person p join fetch p.contacts c").getResultList();

        //
//        List<Person> persons = em.createQuery("from Person p join fetch p.contacts c where p.id > 5").getResultList();

//        persons.forEach(System.out::println);

        em.close();
    }
}
